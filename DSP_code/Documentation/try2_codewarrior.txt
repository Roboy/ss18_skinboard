=============================================================================
List of generated methods in project: try2_codewarrior

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "SS1"       (component SynchroSlave)
   - SS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data).   For information about SW overrun behavior please see <General info page>. [ Version specific 
                information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on selected CPU and 
                receiver is configured to use DMA controller then this method only sets the selected DMA channel. Status of the 
                DMA transfer can then be checked using method GetCharsInRxBuf. See typical usage for details about 
                communication using DMA.
   - SS1_SendChar -Sends one character to the channel. [ Version specific information for Freescale 56800 derivatives ]   DMA 
                mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only sets the selected DMA channel. The status of the DMA transfer can then be 
                checked using GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - SS1_GetCharsInRxBuf -Returns the number of characters in the input buffer.  In [polling mode] (Interrupt service is 
                disabled) if the peripheral does not support finding out number of data-word in its HW input buffer, the method 
                returns 0 if the buffer is empty and returns 1 if the buffer is not empty.  Note: If the Interrupt service is 
                disabled, and the Ignore empty character is set to yes, and a character has been received, then this method 
                returns 1 although it was an empty character. [ Version specific information for Freescale 56800 derivatives ]  
                DMA mode:  If DMA controller is available on the selected CPU and the receiver is configured to use DMA 
                controller then this method returns the number of characters in the receive buffer.
   - SS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. In [polling mode] (Interrupt service is 
                disabled) if the peripheral does not support finding out number of data-word in its HW output buffer, the 
                method returns 0 if the buffer is not full, and returns 1 if the buffer is full.  [ Version specific 
                information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU 
                and the transmitter is configured to use DMA controller then this method returns the number of characters in 
                the transmit buffer.
   - SS1_GetError -Returns a set of errors on the channel (errors that cannot be returned in given methods). The component 
                accumulates errors in a set; after calling [GetError] this set is returned and cleared. This method is 
                available only if the "Interrupt service/event" property is enabled.

Module "MEM1"      (component DSP_MEM)
   - MEM1_memCallocEM -The memCallocEM function dynamically allocates an array with elements initialized to zero. The 
                memCallocEM function first tries to reallocate the memory from the external memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memCallocIM -The memCallocIM function dynamically allocates an array with elements initialized to zero. The 
                memCallocIM function first tries to reallocate the memory from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memFreeEM -The memFreeEM function deallocates a memory block in external memory that previously had been dynamically 
                allocated with the routine memMallocEM. For example see <Typical Usage > page.
   - MEM1_memFreeIM -The memFreeIM function deallocates a memory block in internal memory that previously had been dynamically 
                allocated with the routine memMallocIM. For example see <Typical Usage > page.
   - MEM1_memIsAligned -The memIsAligned function checks the address of a memory block to determine whether it is properly 
                aligned to use modulo addressing. For example see <Typical Usage > page.
   - MEM1_memIsEM -The memIsEM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memIsIM -The memIsIM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedEM -The memMallocAlignedEM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory to use modulo addressing. The function memMallocAlignedEM first tries to 
                allocate the memory, properly aligned, from the external memory partition. However, if space is insufficient in 
                the external memory partition to satisfy the dynamic memory allocation, or if the memory request cannot be 
                properly aligned, memMallocAlignedEM then tries the allocation from the internal memory partition. If 
                memMallocAlignedEM cannot allocate an aligned buffer from either partition, it calls memMallocEM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedIM -The memMallocAlignedIM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory properly to use modulo addressing. The function memMallocAlignedIM first tries 
                to allocate the memory, properly aligned, from the internal memory partition. However, if not enough space 
                exists in the internal memory partition to satisfy the dynamic memory allocation, or if the memory request 
                cannot be properly aligned, memMallocAlignedIM then tries the allocation from the external memory partition. If 
                memMallocAlignedIM cannot allocate an aligned buffer from either partition, it calls memMallocIM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocEM -The memMallocEM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocEM first tries to allocate the memory from the external memory partition. However, if not 
                enough space exists in the external memory partition to satisfy the dynamic memory allocation, memMallocEM then 
                tries the allocation from the internal memory partition. For example see <Typical Usage > page.
   - MEM1_memMallocIM -The memMallocIM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocIM first tries to allocate the memory from the internal memory partition. However, if not 
                enough space exists in the internal memory partition to satisfy the dynamic memory allocation, memMallocIM then 
                tries the allocation from the external memory partition. For example see <Typical Usage > page.
   - MEM1_memReallocEM -The memReallocEM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocEM first tries to reallocate the memory from the external 
                memory partition. However, if not enough space exists in the external memory partition to satisfy the dynamic 
                memory allocation, memReallocEM then tries the allocation from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memReallocIM -The memReallocIM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocIM first tries to reallocate the memory from the internal 
                memory partition. However, if not enough space exists in the internal memory partition to satisfy the dynamic 
                memory allocation, memReallocIM then tries the allocation from the external memory partition For example see 
                <Typical Usage > page.
   - MEM1_memMemcpy -The memcpy routine copies characters between memory buffers For example see <Typical Usage > page.
   - MEM1_memMemset -The memset function sets user specified number of bytes in memory to a specific character For example see 
                <Typical Usage > page.
   - MEM1_memMemsetP -The memset function sets user specified number of bytes in 'P' memory to a specific character
   - MEM1_memCopyPtoX -The memCopyPtoX copies a block of data from the P (program) data memory to the X data memory. The 
                memCopyPtoX executes the specific instructions required to read data from program P data memory, as opposed to 
                X data. For example see <Typical Usage > page.
   - MEM1_memCopyXtoP -The memCopyXtoP copies a block of data from the X data memory to the P (program) data memory. The 
                memCopyXtoP executes the specific instructions required to write data to program P data memory, as opposed to X 
                data. For example see <Typical Usage > page.
   - MEM1_memCopyPtoP -The memCopyPtoP copies a block of data from the P (program) data memory to the P data memory. The 
                memCopyPtoP executes the specific instructions required to read data from program P data memory.
   - MEM1_memReadP16 -The function memReadP16 reads a 16-bit word from the program data (P data), address space. The memReadP16 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memReadP32 -The function memReadP32 reads a 32-bit word from the program data (P data) address space. The memReadP32 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memWriteP16 -The memWriteP16 function writes a 16-bit value into the program data, (P data), address space. The 
                memWriteP16 executes the specific instructions required to write to program (P) data, as opposed to X data. For 
                example see <Typical Usage > page.
   - MEM1_memWriteP32 -The memWriteP32 function writes a 32-bit value into the program data, (P data), address space. The 
                memWriteP32 executes specific instructions required to write to program P data, as opposed to X data. For 
                example see <Typical Usage > page.

Module "Cpu"       (component 56F8006_48_LQFP)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.   For more information about the wait mode see this CPU documentation.   
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.   For more information about the stop mode see this CPU documentation.

===================================================================================
